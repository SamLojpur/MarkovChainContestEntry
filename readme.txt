The game is easy to play. To start you can open 'Gui.m'. From there you are looking 
to select the tweet generated by the code, and not any of the real ones. Select the 
radio bubble below the one you think is safe, and then select submit, and the code
will keep track of your score, and give you a new set of tweets to try.

You can also run MarkovChain.m, in order to test out the fake tweets. Running it will
load for a while and return a MarkovChain object, which you can then apply the
.generate() method to, to return a character array containing the generated tweet.
For example:

>>chain=MarkovChain;

>>chain.generate()

ans =

    ' thank you houston texas on me &amp vote smart and built it @tedcruz 5,481,737 @johnkasich 2,724,749 a tv ads alone can triumph over people need strong america #trump2016#makeamericagreatagain https://t.co/v9gltwj6gy '

Finally, you can replace the tweets.txt file with any UTF-8 text with line 
seperated text. Doing so will make that the new sampled text, and a generator (and gui)
willbe based on that training data. I reccomend using >1000 lines of text for best results
since a single line of text will more often than not make a generator for only that
line of text. I recommend tweets, poems or anything of similar length.


For reference:
The dataset I used for tweets has difficulty with ampersands (&) and emoji, and I have
removed all punctuation and capitalization to improve the accuracy of the generator,
so I have done it to the real tweets to make them all looks similar. 
URLs (like https://t.co/v9gltwj6gy) are broken, since the code reduces them to lowercase
but you can look them up in the tweets.txt file if youre that curious what an image
or link refers to.  
